# Codon table: DNA codon -> amino acid (1-letter)
codon_table = {
    'TTT': 'F', 'TTC': 'F', 'TTA': 'L', 'TTG': 'L',
    'TCT': 'S', 'TCC': 'S', 'TCA': 'S', 'TCG': 'S',
    'TAT': 'Y', 'TAC': 'Y', 'TAA': '*', 'TAG': '*',
    'TGT': 'C', 'TGC': 'C', 'TGA': '*', 'TGG': 'W',
    'CTT': 'L', 'CTC': 'L', 'CTA': 'L', 'CTG': 'L',
    'CCT': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
    'CAT': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',
    'CGT': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
    'ATT': 'I', 'ATC': 'I', 'ATA': 'I', 'ATG': 'M',
    'ACT': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',
    'AAT': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',
    'AGT': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',
    'GTT': 'V', 'GTC': 'V', 'GTA': 'V', 'GTG': 'V',
    'GCT': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',
    'GAT': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',
    'GGT': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G'
}
def translate_dna(dna_seq, frame=0):
    """Translate DNA to protein starting at a specific frame"""
    protein = []
    for i in range(frame, len(dna_seq) - 2, 3):
        codon = dna_seq[i:i+3]
        aa = codon_table.get(codon, '?')
        protein.append(aa)
    return ''.join(protein)

def find_protein_position(protein_seq, dna_seq):
    protein_seq = protein_seq.upper()
    dna_seq = dna_seq.upper()
    
    for frame in range(3):
        protein = translate_dna(dna_seq, frame)
        idx = protein.find(protein_seq)
        if idx != -1:
            start_dna_pos = frame + idx * 3
            dna_start = frame + idx * 3  # Get the starting position in the DNA sequence
            dna_end = dna_start + len(protein_seq) * 3  # Calculate the end position
   
            matching_dna = dna_seq[dna_start:dna_end]  # Get the matching DNA

            print(f"‚úÖ Found in frame {frame} at DNA position {start_dna_pos}")
            print(f"üß¨ Matching DNA: {matching_dna}")

            return start_dna_pos
    print("‚ùå Protein not found in forward strand")
# Example
protein = "RCLLQSLQQ"
dna = "TACTGATCCAAAATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGG CAATGAAAGAATATGGGGAAGATCCGAAAATCGAAACTAACAAGTTCGCTGCAATATGCACTCATTTGGA AGTCTGTTTCATGTATTCGGATTTCCATTTCATTGATGAACGGGGCGAATCAATAATTGTGGAATCTGGC GATCCAAATGCACTACTGAAGCATCGATTTGAGATAATTGAAGGAAGAGACAGAACAATGGCCTGGACAG TGGTAAATAGCATCTGCAACACCACGGGAGTCGAGAAGCCCAAGTTCCTTCCTGATTTGTATGATTACAA GGAGAACCGATTCATTGAGATTGGAGTGACACGGAGAGAGGTCCATATATATTACCTAGAGAAAGCCAAC AAGATAAAATCCGAGAAGACACACATCCACATCTTCTCATTTACTGGAGAAGAAATGGCCACTAAAGCAG ACTACACCCTTGACGAAGAAAGCAGAGCAAGGATTAAAACCAGGCTATTCACTATAAGACAAGAAATGGC CAGCAGGGGTCTATGGGATTCCTTTCGTCAGTCCGAAAGAGGCGAAGAGACAATTGAAGAAAGATTTGAA ATCACAGGAACCATACGCAGGCTTGCCGACCAAAGTCTCCCACCGAACTTCTCCAGCCTTGAAAACTTTA GAGCCTATGTGGATGGATTCGAACCGAACGGCTGCATTGAGGGCAAGCTTTCTCAAATGTCCAAAGAAGT GAACGCCAGAATTGAACCATTTTTGAAGACAACACCACGCCCTCTCAAATTGCCTGATGGGCCCCCCTGC TCTCAGCGGTCAAAATTTCTGCTGATGGATGCTTTGAAATTAAGCATTGAAGACCCAAGTCATGAGGGAG AGGGGATACCACTGTACGATGCAATCAAATGCATGAAGACATTTTTCGGCTGGAAAGAGCCCAATGTAAT CAAACCACATGAAAAGGGCATAAACCCTAACTATCTCCTGGCTTGGAAGCAAGTGCTAGCAGAACTCCAG GACCTTGAAAATGAGGAGAAAATCCCAAAGACGAAGAACATGAAGAAAACAAGTCAATTAAAGTGGGCAC TTGGTGAGAACATGGCACCGGAAAAAGTGGACTTTGAGGACTGCAAGGATGTTGGCGATCTAAAACAGTA TGATAGCGATGAGCCAGTGCCTAGATCGCTAGCGAGTTGGATCCAGAGTGAATTCAATAAGGCATGTGAA TTGACTGACTCAAGCTGGATAGAACTGGACGAAATAGGGGAAGATGTTGCCCCGATTGAACACATTGCAA GCATGAGGAGGAATTATTTCACAGCAGAAGTGTCCCATTGCAGGGCCACTGAATACATAATGAAAGGAGT CTACATAAATACAGCTCTGCTCAATGCATCTTGCGCGGCCATGGATGACTTCCAGCTGATTCCAATGATA AGCRAAAGCAGGACCAAAGAAGGAAGACGGAAAACAAACCTATATGGGTTCATCATAAAAGGAAGGTCTC ATTTGAGGAATGATACCGATGTAGTGAATTTTGTAAGTATGGAGTTTTCTCTCACCGACCCAAGGCTGGA ACCACACAAATGGGGAAAGTACTGCGTTCTTGAAGTGGGAGATATGCTCCTGAGGACTGCAATAGGCCAA GTATCAAGACCCATGTTCCTGTATGTTAGGACCAACGGGACCTCCAAAATCAAGATGAAATGGGGTATGG AGATGAGGCGTTGCCTTCTTCAGTCTCTTCAACAGATTGAGAGCATGATTGAGGCCGAGTCTTCTGTCAA AGAAAAAGACATGACTAAAGAATTTTTTGAGAACAAGTCGGAAACGTGGCCAATTGGAGAATCCCCCAGA GGGGTAGAGGAAGGATCCATTGGGAAGGTATGCAGAACCCTGCTGGCAAAATCTGTGTTCAACAGTCTAT ACGCATCCCCACAACTTGAAGGATTTTCAGCAGAATCGAGGAAACTGCTTCTCATTGTTCAGGCACTTAG GGACAACCTGGAACCTGGAACCTTCGATCTTGGAGGGCTATATGAAGCAATTGAGGAGTGCCTGATTAAT GATCCCTGGGTTTTGCTTAATGCATCTTGGTTCAACTCCTTCCTCACACATGCACTGAAATAGTTGTGGC AATGCTACTATTTGCTATCCATACTGTCCAAAAAAGTA"
dna.replace(" ", "")
pos = find_protein_position(protein, dna)
if pos is not None:
    print(f"Protein starts at position: {pos}")
# # Example usage
# original_dna = "CAAACCATTTGAATGGATGTCAATCCGACTTTACTTTTCTTAAAAGTGCCAGCGCAAGATGCCATAAGTACCACATTCCCTTACACTGGAGATCCTCCATACAGCCATGGAACAGGGACAGGATACACAATGGACACAGTCAACAGAACACATCAATACTCAGAGAAGGGAAAATGGACAACAAACACAGAAACCGGAGCACCTCAACTCAACCCAATTGATGGGCCGCTACCTGAGGACAACGAACCAAGCGGATATGCACAAACAGATTGCGTGTTGGAAGCAATGGCTTTCCTTGAGGAGTCCCACCCAGGGATCTTTGAAAACTCTTGTCTTGAAACGATGGAAGTCGTTCAGCAAACAAGAGTGGACAAACTAACTCAAGGTCGCCAGACCTATGATTGGACACTAAATAGAAACCAACCAGCTGCAACTGCCCTGGCCAACACTATAGAGGTTTTCAGATCAAACAGTCTAACAGCCAATGAATCGGGAGACTAATAGATTTCCTCAAGGATGTGATGGACTCAATGGATAAAGAAGAAATGGAAATAACAACACATTTCCAGAGAAAGAGAAGAGTAAGGGACAACATGACCAAGAAAATGGTCACACAAAGAACAATAGGAAGGAAGAAACAAAGACTAAACAAGAGGAGCTACTTAATAAGAGCACTGACACTGAATACAATGACAAAAGATGCTGAAAGAGGCAAATTGAAGAGACGGGCGATTGCAACACCAGGGATGCAGATTAGAGGATTTGTGTACTTTGTCGAAACACTGGCGAGGAGCATCTGTGAAAAACTTGAGCAATCTGGACTCCCCGTTGGAGGGAATGAGAAGAAGGCTAAATTGGCAAATGTCGTGAGAAAAATGATGACTAACTCACAAGATACAGAGCTCTCCTTCACAATTACTGGAGATAACACCAAATGGAATGAGAATCAAAATCCTCGGATGTTTCTGGCAATGATAACATACATTACAAGAAACCAACCTGAATGGTTTAGAAATGTCTTGAGTATTGCCCCTATAATGTTCTCGAACAAAATGGCGAGATTGGGAAAAGGGTACATGTTTGAAAGTAAGAGCATGAAGTTACGGACACAAATACCACAGAAATGCTTGCAAACATTGACTTAAAATACTTCAATGAATCAACAAGAAAGAAAATCGAAAAAATAAGGCCTCTACTAATAGATGGCACTGCCTCATTGAGTCCTGGAATGATGATGGGCATGTTCAATATGCTGAGTACAGTATTAGGAGTTTCAATCCTAAATCTTGGGCAAAAGAAGTACACCAAAACCACATACTGGTGGGATGGACTCCAATCCTCTGATGATTTCGCCCTCATAGTAAATGCACCGAATCATGAGGGAATACAAGCAGGAGTGGATAGGTTCTATAGGACCTGCAAACTGGTCGGGATCAATATGAGCAAAAAGAAGTCTTACATAAACCGGACTGGAACATTTGAGTTCACAAGCTTTTTCTATCGCTATGGATTTGTGGCTAACTTCAGTATGGAGCTGCCCAGCTTTGGAGTTTCTGGGATCAATGAATCAGCTGACATGAGCATTGGCGTCACAGTGATAAAGAACAACATGATAAACAATGACCTTGGACCAGCAACAGCTCAAATGGCCCTTCAACTATTCATCAAAGATTACAGGTACACGTACCGATGCCACAGAGGTGACACACAAATTCAAACGAGGAGATCATTCGAGCTGAAGAAGCTGTGGGAACAGACCCGTTCAAAGGCAGGACTGTTGGTGTCAGATGGAGGACCAAATCTATACAACATTCGGAATCTCCATATCCCAGAGGTCTGCCTGAAGTGGGATCTGATGGACGAAGATTACCAGGGCAGGTTGTGTAATCCTTTGAACCCATTTGTCAGCCATAAAGAAATTGAGTCCGTAAACAATGCTGTGGTGATGCCAGCCCACGGTCCAGCCAAAAGCATGGAATATGATGCCGTTGCAACTACACACTCATGGATTCCTAAAAGGAATCGTTCCATTCTCAATACCAGTCAAAGGGGAATTCTTGAGGATGAACAGATGTACCAGAGATGCTGCAGTCTATTCGAGAAATTCTTCCCCAGTAGTTCATACAGGAGACCAGTTGGAATTTCCAGCATGGTGGAGGCCATGGTGTCTAGGGCCCGAATCGATGCACGCATTGATTTCGAATCTGGAAGGATCAAAAAGGAAGAGTTTGCTGAGATCATGAAGATCTGTTCCACCATTGAAGAGCTCAGACGGCAAAAATAGTGAATTTAGCTTGTCCTTCATGAAAAAATG"  # Could include introns
# protein_seq = "GDPPYSHGTGTGY"

# results = translate_dna(original_dna)
# for start, spliced_dna in results:
#     print(f"Match at position {start}:")
#     print("Spliced DNA:", spliced_dna)
#     print("Translated:", translate_dna(spliced_dna))
